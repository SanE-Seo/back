name: deploy-docker
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup jdk 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: corretto

      - name: Make application.yml
        run: |
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with gradle
        run: ./gradlew clean build -x test
        shell: bash
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Aws ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.DOCKER_IMAGENAME }} .
          docker push $ECR_REGISTRY/${{ secrets.DOCKER_IMAGENAME }}
          
      - name: Docker build, push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGENAME }}
    

      - name: Connect to EC2 and run docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PEM }}
          script: |
            sudo aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }} && \
            sudo aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }} && \
            sudo aws configure set default_region ap-northeast-2 && \
            sudo aws configure set output json
            sudo aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
            sudo docker stop server
            sudo docker rm server ;
            sudo docker pull $ECR_REGISTRY/${{ secrets.DOCKER_IMAGENAME }}
            sudo docker run --name=server -d -p 80:5000 --restart=always $ECR_REGISTRY/${{ secrets.DOCKER_IMAGENAME }}
            sudo docker image prune -f
